{"ast":null,"code":"var _jsxFileName = \"/home/john/ShoppingSpree/frontend/src/components/Grid/index.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { saveCurrentLayout } from \"../../store/layout\";\nimport Point from \"../Point\";\nimport \"./grid.css\"; // use  context provider to determine what ill be clicking?\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Grid = props => {\n  _s();\n\n  let start = \"start\";\n  let end = \"end\";\n  let rows = 30;\n  let dispatch = useDispatch();\n  let columns = 62;\n  const [grid, setGrid] = useState([]);\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const [random, setRandom] = useState(true);\n  let currPointer = props.currPointer;\n  useEffect(() => {\n    let newGrid = [];\n\n    for (let i = 0; i < rows; i++) {\n      let currRow = [];\n\n      for (let j = 0; j < columns; j++) {\n        currRow.push({\n          row: i,\n          column: j,\n          type: \"none\"\n        });\n      }\n\n      newGrid.push(currRow);\n    }\n\n    setGrid(newGrid);\n  }, []);\n\n  function mouseDown(row, col, e, type) {\n    let newGrid = handleChange(row, col, grid);\n    setGrid(newGrid);\n    setIsMouseDown(true);\n    return currPointer;\n  }\n\n  function mouseEnter(row, col, e, type) {\n    if (isMouseDown && currPointer !== start && currPointer !== end) {\n      let newGrid = handleChange(row, col, grid); // console.log(\"Adding css class to\" ,row,col)\n      // e.target.classList.remove(\"none\",\"wall\",\"start\",\"end\")\n      // e.target.classList.add(type)\n\n      setRandom(!random);\n      setGrid(newGrid);\n      return currPointer;\n    }\n  }\n\n  function mouseUp(row, col) {\n    setIsMouseDown(false);\n  }\n\n  function handleChange(row, col, grid) {\n    let newGrid = grid;\n\n    if (newGrid[row][col].type === null || newGrid[row][col].type !== currPointer) {\n      if (currPointer === 'start' || currPointer === 'end') {\n        resetStartInGrid();\n      }\n\n      newGrid[row][col].type = currPointer;\n    } else if (newGrid[row][col].type === currPointer) {\n      newGrid[row][col].type = null;\n    }\n\n    return newGrid;\n  }\n\n  function resetStartInGrid() {\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        if (grid[i][j].type === currPointer) grid[i][j].type = \"none\";\n      }\n    }\n  }\n\n  async function handleSaveLayout(e) {\n    await dispatch(saveCurrentLayout(grid));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: async e => {\n        handleSaveLayout(e);\n      },\n      children: \" Save Layout \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: grid.map((currRow, currRowIndex) => {\n        // return <Point x={1}></Point>\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"column\",\n          children: currRow.map((currColumn, currColumnIndex) => /*#__PURE__*/_jsxDEV(Point, {\n            x: currRowIndex,\n            y: currColumnIndex,\n            type: grid[currRowIndex][currColumnIndex].type,\n            rows: rows,\n            columns: columns,\n            currPointer: currPointer,\n            mouseDown: mouseDown,\n            mouseEnter: mouseEnter,\n            mouseUp: mouseUp,\n            onMouseDown: () => {\n              props.mouseDown(currRowIndex, currColumnIndex);\n            },\n            onMouseEnter: e => {\n              props.mouseEnter(currRowIndex, currColumnIndex);\n            },\n            onMouseUp: e => {\n              props.mouseUp(currRowIndex, currColumnIndex);\n            },\n            children: \" \"\n          }, `${currRowIndex} ${currColumnIndex} point`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 55\n          }, this))\n        }, `${currRowIndex} column`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 16\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 12\n  }, this);\n};\n\n_s(Grid, \"XdPV3JQv6l52YzUNjKC2np6nqLY=\", false, function () {\n  return [useDispatch];\n});\n\n_c = Grid;\nexport default Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["/home/john/ShoppingSpree/frontend/src/components/Grid/index.js"],"names":["useEffect","useState","useDispatch","saveCurrentLayout","Point","Grid","props","start","end","rows","dispatch","columns","grid","setGrid","isMouseDown","setIsMouseDown","random","setRandom","currPointer","newGrid","i","currRow","j","push","row","column","type","mouseDown","col","e","handleChange","mouseEnter","mouseUp","resetStartInGrid","handleSaveLayout","map","currRowIndex","currColumn","currColumnIndex"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { saveCurrentLayout } from \"../../store/layout\";\nimport Point from \"../Point\";\nimport \"./grid.css\"\n// use  context provider to determine what ill be clicking?\nconst Grid = (props) =>{\n    let start = \"start\"\n    let end = \"end\"\n    let rows = 30\n    let dispatch = useDispatch()\n    let columns = 62\n    const [grid,setGrid] = useState([]);\n    const [isMouseDown,setIsMouseDown] = useState(false)\n    const [random,setRandom] = useState(true)\n    let currPointer = props.currPointer;\n    useEffect( () => {\n        let newGrid = []\n        for(let i = 0 ; i < rows ; i++){\n            let currRow = [];\n            for(let j = 0 ; j < columns ; j++){\n                currRow.push({\n                    row:i,\n                    column:j,\n                    type:\"none\"\n                })\n            }\n            newGrid.push(currRow)\n        }\n        setGrid(newGrid)\n\n    },[])\n    function mouseDown(row,col,e,type){\n        let newGrid = handleChange(row,col,grid);\n        setGrid(newGrid)\n        setIsMouseDown(true)\n\n        return currPointer\n    }\n    function mouseEnter(row,col,e,type){\n        if (isMouseDown && currPointer!== start && currPointer!== end){\n        let newGrid = handleChange(row,col,grid)\n\n        // console.log(\"Adding css class to\" ,row,col)\n        // e.target.classList.remove(\"none\",\"wall\",\"start\",\"end\")\n        // e.target.classList.add(type)\n        setRandom(!random)\n        setGrid(newGrid)\n\n\n        return currPointer\n        }\n    }\n    function mouseUp(row,col){\n        setIsMouseDown(false)\n    }\n\n    function handleChange(row,col,grid){\n        let newGrid = grid;\n        if(newGrid[row][col].type === null || newGrid[row][col].type !== currPointer){\n            if(currPointer === 'start' || currPointer === 'end'){\n                resetStartInGrid();\n            }\n            newGrid[row][col].type = currPointer\n        }\n         else if(newGrid[row][col].type === currPointer){\n            newGrid[row][col].type = null\n         }\n         return newGrid\n    }\n    function resetStartInGrid(){\n        for(let i = 0 ; i < rows ; i++ ){\n            for (let j = 0 ; j < columns;j++){\n                if(grid[i][j].type === currPointer ) grid[i][j].type = \"none\"\n            }\n        }\n    }\n    async function handleSaveLayout(e){\n        await dispatch(saveCurrentLayout(grid))\n    }\n    return <div>\n        <button onClick={ async (e)=>{\n            handleSaveLayout(e)\n        }}> Save Layout </button>\n    <div className=\"grid\">\n    {grid.map((currRow,currRowIndex) => {\n        // return <Point x={1}></Point>\n        return <div className=\"column\" key={`${currRowIndex} column`}>\n        {currRow.map( (currColumn,currColumnIndex) => <Point\n        key={`${currRowIndex} ${currColumnIndex} point`}\n         x={currRowIndex}\n         y={currColumnIndex}\n         type={grid[currRowIndex][currColumnIndex].type}\n         rows={rows}\n         columns={columns}\n         currPointer={currPointer}\n         mouseDown={mouseDown}\n         mouseEnter={mouseEnter}\n         mouseUp={mouseUp}\n         onMouseDown={() => {props.mouseDown(currRowIndex,currColumnIndex)\n         }}\n         onMouseEnter={(e)=> {props.mouseEnter(currRowIndex,currColumnIndex)}}\n         onMouseUp={(e)=>{props.mouseUp(currRowIndex,currColumnIndex)\n         }}\n         > </Point>)}\n        </div>\n    })}\n     </div>\n     </div>\n}\n\nexport default Grid\n"]},"metadata":{},"sourceType":"module"}