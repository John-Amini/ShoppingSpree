{"ast":null,"code":"var _jsxFileName = \"/home/john/ShoppingSpree/frontend/src/components/Grid/index.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport Point from \"../Point\";\nimport \"./grid.css\"; // use  context provider to determine what ill be clicking?\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Grid = props => {\n  _s();\n\n  let rows = 30;\n  let columns = 62;\n  const [grid, setGrid] = useState([]);\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  let currPointer = props.currPointer;\n  console.log(currPointer);\n  useEffect(() => {\n    //when trying to map over the 2d array if the values are empty it doesn actually do anything but itll if I add things\n    let newGrid = []; // for (let i  = 0 ;  i < 10;i++){\n    //     newGrid[i] = new Array(10)\n    //     newGrid[i][0] = 1\n    //     newGrid[i][1] = 2\n    //     newGrid[i][2] = 3\n    //     newGrid[i][3] = 4\n    //     newGrid[i][4] = 5\n    //     newGrid[i][5] = 6\n    //     newGrid[i][6] = 7\n    //     newGrid[i][7] = 8\n    //     newGrid[i][8] = 9\n    //     newGrid[i][9] = 10\n    // }\n\n    for (let i = 0; i < rows; i++) {\n      let currRow = [];\n\n      for (let j = 0; j < columns; j++) {\n        currRow.push({\n          row: i,\n          column: j,\n          type: null\n        });\n      }\n\n      newGrid.push(currRow);\n    }\n\n    setGrid(newGrid);\n  }, []);\n\n  function mouseDown(row, col) {\n    let newGrid = handleChange(row, col, grid);\n    setGrid(newGrid);\n  }\n\n  function mouseEnter(row, col) {\n    if (isMouseDown) {\n      let newGrid = handleChange(row, col, grid);\n      setGrid(newGrid);\n    }\n  }\n\n  function mouseUp(row, col) {\n    setIsMouseDown(false);\n  }\n\n  function handleChange(row, col) {\n    let newGrid = grid;\n\n    if (newGrid[row][col].type === null || newGrid[row][col].type !== currPointer) {\n      console.log(`Point is now a ${currPointer}`);\n      newGrid[row][col].type = currPointer;\n    } else if (newGrid[row][col].type === currPointer) {\n      console.log(`Point is now null`);\n      newGrid[row][col].type = null;\n    }\n\n    return newGrid;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid\",\n    children: grid.map((currRow, currRowIndex) => {\n      // return <Point x={1}></Point>\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column\",\n        children: currRow.map((currColumn, currColumnIndex) => /*#__PURE__*/_jsxDEV(Point, {\n          x: currRowIndex,\n          y: currColumnIndex,\n          rows: rows,\n          columns: columns,\n          currPointer: currPointer,\n          mouseDown: mouseDown,\n          mouseEnter: mouseEnter,\n          mouseUp: mouseUp,\n          children: \" \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 55\n        }, this))\n      }, currRowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 16\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 12\n  }, this);\n};\n\n_s(Grid, \"JYmD0E7+umbzC77KwyVgTHXZjn0=\");\n\n_c = Grid;\nexport default Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["/home/john/ShoppingSpree/frontend/src/components/Grid/index.js"],"names":["useEffect","useState","Point","Grid","props","rows","columns","grid","setGrid","isMouseDown","setIsMouseDown","currPointer","console","log","newGrid","i","currRow","j","push","row","column","type","mouseDown","col","handleChange","mouseEnter","mouseUp","map","currRowIndex","currColumn","currColumnIndex"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\"\nimport Point from \"../Point\";\nimport \"./grid.css\"\n// use  context provider to determine what ill be clicking?\nconst Grid = (props) =>{\n    let rows = 30\n    let columns = 62\n    const [grid,setGrid] = useState([]);\n    const [isMouseDown,setIsMouseDown] = useState(false)\n    let currPointer = props.currPointer;\n    console.log(currPointer)\n    useEffect( () => {\n        //when trying to map over the 2d array if the values are empty it doesn actually do anything but itll if I add things\n        let newGrid = []\n        // for (let i  = 0 ;  i < 10;i++){\n        //     newGrid[i] = new Array(10)\n        //     newGrid[i][0] = 1\n        //     newGrid[i][1] = 2\n        //     newGrid[i][2] = 3\n        //     newGrid[i][3] = 4\n        //     newGrid[i][4] = 5\n        //     newGrid[i][5] = 6\n        //     newGrid[i][6] = 7\n        //     newGrid[i][7] = 8\n        //     newGrid[i][8] = 9\n        //     newGrid[i][9] = 10\n        // }\n        for(let i = 0 ; i < rows ; i++){\n            let currRow = [];\n            for(let j = 0 ; j < columns ; j++){\n                currRow.push({\n                    row:i,\n                    column:j,\n                    type:null\n                })\n            }\n            newGrid.push(currRow)\n        }\n        setGrid(newGrid)\n\n    },[])\n    function mouseDown(row,col){\n        let newGrid = handleChange(row,col,grid);\n        setGrid(newGrid)\n    }\n    function mouseEnter(row,col){\n        if (isMouseDown){\n        let newGrid = handleChange(row,col,grid)\n        setGrid(newGrid)\n        }\n    }\n    function mouseUp(row,col){\n        setIsMouseDown(false)\n    }\n\n    function handleChange(row,col){\n        let newGrid = grid;\n        if(newGrid[row][col].type === null || newGrid[row][col].type !== currPointer){\n            console.log(`Point is now a ${currPointer}`)\n            newGrid[row][col].type = currPointer\n        }\n         else if(newGrid[row][col].type === currPointer){\n            console.log(`Point is now null`)\n            newGrid[row][col].type = null\n         }\n         return newGrid\n    }\n    return <div className=\"grid\">\n    {grid.map((currRow,currRowIndex) => {\n        // return <Point x={1}></Point>\n        return <div className=\"column\" key={currRowIndex}>\n        {currRow.map( (currColumn,currColumnIndex) => <Point x={currRowIndex}\n         y={currColumnIndex}\n         rows={rows}\n         columns={columns}\n         currPointer={currPointer}\n         mouseDown={mouseDown}\n         mouseEnter={mouseEnter}\n         mouseUp={mouseUp}\n         > </Point>)}\n        </div>\n    })}\n     </div>\n}\n\nexport default Grid\n"]},"metadata":{},"sourceType":"module"}